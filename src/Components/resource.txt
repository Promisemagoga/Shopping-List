import { collection, doc, getDoc, getDocs, updateDoc } from 'firebase/firestore';
import React, { useEffect, useState } from 'react'
import { FaRegTimesCircle } from 'react-icons/fa'
import { db } from '../Config/Firebase';

function EditModal({ open, onClose, upItem }) {
  const [updatedData, setUpdatedData] = useState({
    item: "",
    price: "",
    quantity: "",
  })


  useEffect(() => {
console.log(upItem);
setUpdatedData({
        item: upItem.item,
        price: upItem.price,
        quantity: upItem.quantity,
      })
    // fetchData()
  }, []);

  // const getItem = async () => {
  //   try {
  //     const querrySnapShot = await getDocs(collection(db, "items"));
  //     const data = querrySnapShot.docs.map((doc) => ({
  //       id: doc.id,
  //       ...doc.data(),
  //     }));
  //     setUpdatedData({
  //       itemId: data.id,
  //       item: data.item,
  //       price: data.price,
  //       quantity: data.quantity
  //     }

  //     );
  //   } catch (error) {
  //     console.log(error);
  //   }
  // }


  //  const fetchData = async () => {
  //   const docRef = doc(db, "items", itemId);
  //   const docSnap = await getDoc(docRef);
  //   if (docSnap.exists()) {
  //     const document = {
  //       id: docSnap.id, ...docSnap.data()
  //     }
  //     setUpdatedData({
  //       item: document.item,
  //       price: document.price,
  //       quantity: document.quantity,
  //     })
  //     console.log(document);
  //   } else {
  //     console.log("No such document!");
  //   }
  // }

  function handleChange(event) {
    setUpdatedData({
      ...updatedData,
      [event.target.name]: event.target.value,
    })
  }

  const updateFunc = (async () => {
    const docRef = doc(db, "items", upItem.id);
    await updateDoc(docRef, updatedData)
      .then(() => {
        console.log('Data successfully updated!');
      })
      .catch((error) => {
        console.error('Error updating data: ', error);
      });

  })

  if (!open) return null

  return (
    <div className='modal'>
      <FaRegTimesCircle className='closeModal' onClick={onClose} />
      <div className='form '>

        <input type="text" name='item' placeholder='Enter item' onChange={handleChange} />
        <input type="number" name='quantity' placeholder='quantity' onChange={handleChange} />
        <input type="number" name='price' placeholder='Enter estimated price' onChange={handleChange} />
        <button onClick={updateFunc}>Save Changes</button>
      </div>

    </div>
  )
}

export default EditModal













import React, { useEffect, useState } from 'react'
import NavBar from './NavBar'
import { FaArrowCircleRight, FaEdit, FaTrash } from "react-icons/fa";
import EditModal from './EditModal';
import { collection, deleteDoc, doc, getDocs } from 'firebase/firestore';
import { db } from '../Config/Firebase';
import { useDispatch, useSelector } from 'react-redux'
import { fetchData } from '../Redux/data';

function DisplayList() {

    const [openModal, setOpenModal] = useState(false)
    const [item, setItem] = useState([])
    const [upItem, setUpItem] = useState("")
    const dispatch = useDispatch()
  
        const { items } = useSelector((state) => state.items);
        useEffect(() => {
            dispatch(fetchData())
           console.log(items);
        }, [])
        // try {
        //     const querrySnapShot = await getDocs(collection(db, "items"));
        //     const data = querrySnapShot.docs.map((doc) => ({
        //         id: doc.id,
        //         ...doc.data(),
        //     }));
        //     setItem(data);
        // } catch (error) {
        //     console.log(error);
        // }
    

 


    const deleteFun = async (event, id) => {
        console.log(id);
        const docRef = doc(db, "items", id);
        deleteDoc(docRef)
            .then(() => {
                console.log('Document successfully deleted!');
            })
            .catch((error) => {
                console.error('Error removing document: ', error);
            })
    }

    function update(uItem) {
        setUpItem(uItem)
        setOpenModal(true);
    }


    return (
        <div>
            <NavBar />
            <div className='displayMainCard'>
                <h2>My List</h2>
                {items.map((data, index) => (
                    <div className='displayCard' key={index}>
                        <div className='itemDetails'>
                            <h3>{data.item}</h3>
                            <h3>R{data.price}</h3>
                            <h3>Qty:{data.quantity}</h3>
                        </div>
                        <div className='crudButtons'>
                            < FaTrash onClick={(event) => deleteFun(event, data.id)} />
                            <FaEdit onClick={(event) => update(data)} />
                        </div>
                    </div>
                ))}
                <h1 style={{ float: "right" }}>Total: R109</h1>
            </div>
            {upItem !== "" ? <EditModal open={openModal} onClose={() => setOpenModal(false)} upItem={upItem} /> : null}
        </div>
    )
}

export default DisplayList